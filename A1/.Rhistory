TD_priors_real[5,] <- real_sd_priors[i,]
real_model_for_loop <- brm(
mlu3,
data= df1,
family = lognormal,
prior = TD_priors_real,
sample_prior = T,
iter = 2000,
warmup = 1000,
backend = "cmdstanr",
threads = threading(2),
cores = 2,
chains = 2,
control = list(adapt_delta = 0.99, max_treedepth = 20)
)
Model_for_loop_samp_real <- as_draws_df(real_model_for_loop)
#posterior_predictions <- spread_draws(model_for_loop, b_DiagASD:Visit) #slope, so b_DiagASD:Visit
real_posterior_predictions_TD <- Model_for_loop_samp_real[,4] #number 3 =ASD
real_posterior_prediction_TD[i] <- median(real_posterior_predictions_TD$`b_diagnosisTD:visit`)
real_posterior_prediction_TD_lci[i] <- quantile(real_posterior_predictions_TD$`b_diagnosisTD:visit`, prob = 0.025) #lower boundy for 95% interval
real_posterior_prediction_TD_uci[i] <- quantile(real_posterior_predictions_TD$`b_diagnosisTD:visit`, prob = 0.975) #upper boundry for 95% interval
}
#Making dataframe from values from loop
real_sensitivity_check_TD <- data.frame(TD_prior_SD_real, real_posterior_prediction_TD, real_posterior_prediction_TD_lci, real_posterior_prediction_TD_uci)
hypothesis(mlu3p3real, "visit<0.03", group = "ID", scope="coef")
hypothesis(mlu3p3real, "visit<0.04", group = "ID", scope="coef")
hypothesis(mlu3p3real, "visit<0.15", group = "ID", scope="coef")
hypothesis(mlu3p3real, "visit<0.03", group = "ID", scope="coef")
hypothesis(mlu3p3real,"diagnosisTD:visit > diagnosisASD:visit",group="ID",scope="coef") #individual levels
#sensitivity check ASD the real one (maybe doesn't make sence with uninformed priors..)
TD_prior_SD_real <- seq(0.01, 0.15, length.out = 15)
#My priors
TD_priors_real <- c(
prior(normal(0, 0.2), class=b, lb=0),
prior(normal(0.41, 0.41), class=b, coef= "diagnosisASD"),
prior(normal(0.41, 0.22), class=b, coef= "diagnosisTD"),
prior(normal(0.15, 0.1), class=b, coef= "diagnosisASD:visit"),
prior(normal(0.2, 0.08), class=b, coef= "diagnosisTD:visit"),
prior(normal(0, 0.2), class=sd, coef= Intercept, group=ID), #allowing the intercept for each person to varriate with 40% (because of logscale)
prior(normal(0, 0.1), class=sd, coef= visit, group=ID), #slope to varriate with 20% for each person
prior(normal(0, 0.2), class= sigma),
prior(lkj(1), class= "cor")
)
#create empty sets to store output of the loop for ASD:
real_posterior_prediction_TD <- c()
real_posterior_prediction_TD_lci <- c()
real_posterior_prediction_TD_uci <- c()
#Making all the priors we want to check (aka just changing the sd)
real_sd_priors <- c(
prior(normal(0, 0.01), class = b, coef= "diagnosisTD:visit"),
prior(normal(0, 0.02), class = b, coef= "diagnosisTD:visit"),
prior(normal(0, 0.03), class = b, coef= "diagnosisTD:visit"),
prior(normal(0, 0.04), class = b, coef= "diagnosisTD:visit"),
prior(normal(0, 0.05), class = b, coef= "diagnosisTD:visit"),
prior(normal(0, 0.06), class = b, coef= "diagnosisTD:visit"),
prior(normal(0, 0.07), class = b, coef= "diagnosisTD:visit"),
prior(normal(0, 0.08), class = b, coef= "diagnosisTD:visit"),
prior(normal(0, 0.09), class = b, coef= "diagnosisTD:visit"),
prior(normal(0, 0.10), class = b, coef= "diagnosisTD:visit"),
prior(normal(0, 0.11), class = b, coef= "diagnosisTD:visit"),
prior(normal(0, 0.12), class = b, coef= "diagnosisTD:visit"),
prior(normal(0, 0.13), class = b, coef= "diagnosisTD:visit"),
prior(normal(0, 0.14), class = b, coef= "diagnosisTD:visit"),
prior(normal(0, 0.15), class = b, coef= "diagnosisTD:visit")#,
# prior(normal(0, 0.16), class = b, coef= "diagnosisTD:visit"),
# prior(normal(0, 0.17), class = b, coef= "diagnosisTD:visit"),
# prior(normal(0, 0.18), class = b, coef= "diagnosisTD:visit"),
# prior(normal(0, 0.19), class = b, coef= "diagnosisTD:visit"),
# prior(normal(0, 0.20), class = b, coef= "diagnosisTD:visit")
)
#loop through making priors with different sd
for (i in seq(1, 15)) {
TD_priors_real[5,] <- real_sd_priors[i,]
real_model_for_loop <- brm(
mlu3,
data= df1,
family = lognormal,
prior = TD_priors_real,
sample_prior = T,
iter = 2000,
warmup = 1000,
backend = "cmdstanr",
threads = threading(2),
cores = 2,
chains = 2,
control = list(adapt_delta = 0.99, max_treedepth = 20)
)
Model_for_loop_samp_real <- as_draws_df(real_model_for_loop)
#posterior_predictions <- spread_draws(model_for_loop, b_DiagASD:Visit) #slope, so b_DiagASD:Visit
real_posterior_predictions_TD <- Model_for_loop_samp_real[,4] #number 3 =ASD
real_posterior_prediction_TD[i] <- median(real_posterior_predictions_TD$`b_diagnosisTD:visit`)
real_posterior_prediction_TD_lci[i] <- quantile(real_posterior_predictions_TD$`b_diagnosisTD:visit`, prob = 0.025) #lower boundy for 95% interval
real_posterior_prediction_TD_uci[i] <- quantile(real_posterior_predictions_TD$`b_diagnosisTD:visit`, prob = 0.975) #upper boundry for 95% interval
}
#Making dataframe from values from loop
real_sensitivity_check_TD <- data.frame(TD_prior_SD_real, real_posterior_prediction_TD, real_posterior_prediction_TD_lci, real_posterior_prediction_TD_uci)
#visualizing the sensitivity plot
real_rubostness_check_TD <- ggplot(data=real_sensitivity_check_TD, aes(x=TD_prior_SD_real, y=real_posterior_prediction_TD)) +
geom_point(size = 3) +
geom_pointrange(ymin = real_posterior_prediction_TD_lci, ymax = real_posterior_prediction_TD_uci) + #pointrange is 95% interval (vertical lines for each dot)
ylim(0.001, 0.20) + #range for the slope (y-aksis range)
labs(x="Standard Deviation of Slope Prior",
y="Posterior Estimate for Slope",
title="Sensitivity analysis for multi-level model TD") +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5, size = 15),
axis.title.x = element_text(size = 13),
axis.text.y = element_text(size = 12),
axis.text.x = element_text(size = 12),
axis.title.y = element_text(size = 13))+
geom_abline(intercept=0.2,slope=0, color="3FFFB6")
ggsave("true_real_rubostness_check_TD.pdf", plot=real_rubostness_check_TD)
real_rubostness_check_TD
real_rubostness_check_TD <- ggplot(data=real_sensitivity_check_TD, aes(x=TD_prior_SD_real, y=real_posterior_prediction_TD)) +
geom_point(size = 3) +
geom_pointrange(ymin = real_posterior_prediction_TD_lci, ymax = real_posterior_prediction_TD_uci) + #pointrange is 95% interval (vertical lines for each dot)
ylim(0.001, 0.20) + #range for the slope (y-aksis range)
labs(x="Standard Deviation of Slope Prior",
y="Posterior Estimate for Slope",
title="Sensitivity analysis for multi-level model TD") +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5, size = 15),
axis.title.x = element_text(size = 13),
axis.text.y = element_text(size = 12),
axis.text.x = element_text(size = 12),
axis.title.y = element_text(size = 13))+
geom_abline(intercept=0.17,slope=0, color="#3FFFB6")
ggsave("true_real_rubostness_check_TD.png", plot=real_rubostness_check_TD)
real_rubostness_check_ASD <- ggplot(data=real_sensitivity_check_ASD, aes(x=ASD_prior_ASD_real, y=real_posterior_prediction_ASD)) +
geom_point(size = 3) +
geom_pointrange(ymin = real_posterior_prediction_ASD_lci, ymax = real_posterior_prediction_ASD_uci) + #pointrange is 95% interval (vertical lines for each dot)
ylim(0.001, 0.20) + #range for the slope (y-aksis range)
labs(x="Standard Deviation of Slope Prior",
y="Posterior Estimate for Slope",
title="Sensitivity analysis for multi-level model ASD") +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5, size = 15),
axis.title.x = element_text(size = 13),
axis.text.y = element_text(size = 12),
axis.text.x = element_text(size = 12),
axis.title.y = element_text(size = 13))+
geom_abline(intercept=0.04,slope=0, color="#3FFFB6")
real_rubostness_check_ASD
knitr::opts_chunk$set(echo = TRUE)
setwd('.')
library(tidyverse,
ggplot2,
gridExtra,
bayesplot,
brms,
dplyr
)
library(dplyr)
library(ggplot2)
library(bayesplot)
library(gridExtra)
library(brms)
library(tidyverse)
real_rubostness_check_asd <- ggplot(data=real_sensitivity_check_ASD, aes(x=ASD_prior_SD_real, y=real_posterior_prediction_ASD)) +
geom_point(size = 3) +
geom_pointrange(ymin = real_posterior_prediction_ASD_lci, ymax = real_posterior_prediction_ASD_uci) + #pointrange is 95% interval (vertical lines for each dot)
ylim(0.001, 0.20) + #range for the slope (y-aksis range)
labs(x="Standard Deviation of Slope Prior",
y="Posterior Estimate for Slope",
title="Sensitivity analysis for multi-level model ASD") +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5, size = 15),
axis.title.x = element_text(size = 13),
axis.text.y = element_text(size = 12),
axis.text.x = element_text(size = 12),
axis.title.y = element_text(size = 13))+
ggplot2::geom_abline(intercept=0.04,slope=0,color="#3FFFB6")
real_rubostness_check_asd
ggsave("real_rubostness_check_asd.png", plot=real_rubostness_check_asd)
ggsave("real_rubostness_check_asd.png", plot=real_rubostness_check_asd,width=12,height=10,units="cm")
#Making dataframe from values from loop
#Error in data.frame(ASD_prior_SD_real, real_posterior_prediction_ASD,  :
#argumenter antyder forskelligt antal rÃ¦kker: 20, 0
real_sensitivity_check_TD <- data.frame(ASD_prior_SD_real, real_posterior_prediction_ASD # null
, real_posterior_prediction_ASD_lci #NA values
, real_posterior_prediction_ASD_uci) #NA values
ASD_priors_real[4,]
#sensitivity check ASD the real one (maybe doesn't make sence with uninformed priors..)
ASD_prior_SD_real <- seq(0.01, 0.15, length.out = 15)
#My priors
ASD_priors_real <-c(
prior(normal(0, 0.2), class=b, lb=0),
prior(normal(0.41, 0.41), class=b, coef= "diagnosisASD"),
prior(normal(0.41, 0.22), class=b, coef= "diagnosisTD"),
prior(normal(0.15, 0.1), class=b, coef= "diagnosisASD:visit"),
prior(normal(0.2, 0.08), class=b, coef= "diagnosisTD:visit"),
prior(normal(0, 0.2), class=sd, coef= Intercept, group=ID), #allowing the intercept for each person to varriate with 40% (because of logscale)
prior(normal(0, 0.1), class=sd, coef= visit, group=ID), #slope to varriate with 20% for each person
prior(normal(0, 0.2), class= sigma),
prior(lkj(1), class= "cor")
)
#create empty sets to store output of the loop for ASD:
real_posterior_prediction_ASD <- c()
real_posterior_prediction_ASD_lci <- c()
real_posterior_prediction_ASD_uci <- c()
#Making all the priors we want to check (aka just changing the sd)
real_sd_priors <- c(
prior(normal(0.2, 0.01), class = b, coef= "diagnosisTD:visit"),
prior(normal(0.2, 0.02), class = b, coef= "diagnosisTD:visit"),
prior(normal(0.2, 0.03), class = b, coef= "diagnosisTD:visit"),
prior(normal(0.2, 0.04), class = b, coef= "diagnosisTD:visit"),
prior(normal(0.2, 0.05), class = b, coef= "diagnosisTD:visit"),
prior(normal(0.2, 0.06), class = b, coef= "diagnosisTD:visit"),
prior(normal(0.2, 0.07), class = b, coef= "diagnosisTD:visit"),
prior(normal(0.2, 0.08), class = b, coef= "diagnosisTD:visit"),
prior(normal(0.2, 0.09), class = b, coef= "diagnosisTD:visit"),
prior(normal(0.2, 0.10), class = b, coef= "diagnosisTD:visit"),
prior(normal(0.2, 0.11), class = b, coef= "diagnosisTD:visit"),
prior(normal(0.2, 0.12), class = b, coef= "diagnosisTD:visit"),
prior(normal(0.2, 0.13), class = b, coef= "diagnosisTD:visit"),
prior(normal(0.2, 0.14), class = b, coef= "diagnosisTD:visit"),
prior(normal(0.2, 0.15), class = b, coef= "diagnosisTD:visit")#,
# prior(normal(0.2, 0.16), class = b, coef= "diagnosisTD:visit"),
# prior(normal(0.2, 0.17), class = b, coef= "diagnosisTD:visit"),
# prior(normal(0.2, 0.18), class = b, coef= "diagnosisTD:visit"),
# prior(normal(0.2, 0.19), class = b, coef= "diagnosisTD:visit"),
# prior(normal(0.2, 0.20), class = b, coef= "diagnosisTD:visit")
)
#loop through making priors with different sd
for (i in seq(1, 15)) {
ASD_priors_real[4,] <- real_sd_priors[i,] #number 4 for ASD and 5 for TD
real_model_for_loop <- brm(
mlu3,
data= df1,
family = lognormal,
prior = ASD_priors_real,
sample_prior = T,
iter = 2000,
warmup = 1000,
backend = "cmdstanr",
threads = threading(2),
cores = 2,
chains = 2,
control = list(adapt_delta = 0.99, max_treedepth = 20)
)
Model_for_loop_samp_real <- as_draws_df(real_model_for_loop)
#posterior_predictions <- spread_draws(model_for_loop, b_DiagASD:Visit) #slope, so b_DiagASD:Visit
real_posterior_predictions_ASD <- Model_for_loop_samp_real[,3]
real_posterior_prediction_ASD[i] <- median(real_posterior_predictions_ASD$`b_diagnosisTD:visit`)
real_posterior_prediction_ASD_lci[i] <- quantile(real_posterior_predictions_ASD$`b_diagnosisTD:visit`, prob = 0.025) #lower boundy for 95% interval
real_posterior_prediction_ASD_uci[i] <- quantile(real_posterior_predictions_ASD$`b_diagnosisTD:visit`, prob = 0.975) #upper boundry for 95% interval
}
#sensitivity check ASD the real one (maybe doesn't make sence with uninformed priors..)
ASD_prior_SD_real <- seq(0.01, 0.15, length.out = 15)
#My priors
ASD_priors_real <- c(
prior(normal(0, 0.2), class=b, lb=0),
prior(normal(0.41, 0.41), class=b, coef= "diagnosisASD"),
prior(normal(0.41, 0.22), class=b, coef= "diagnosisTD"),
prior(normal(0.15, 0.1), class=b, coef= "diagnosisASD:visit"),
prior(normal(0.2, 0.08), class=b, coef= "diagnosisTD:visit"),
prior(normal(0, 0.2), class=sd, coef= Intercept, group=ID), #allowing the intercept for each person to varriate with 40% (because of logscale)
prior(normal(0, 0.1), class=sd, coef= visit, group=ID), #slope to varriate with 20% for each person
prior(normal(0, 0.2), class= sigma),
prior(lkj(1), class= "cor")
)
#create empty sets to store output of the loop for ASD:
real_posterior_prediction_TD <- c()
real_posterior_prediction_TD_lci <- c()
real_posterior_prediction_TD_uci <- c()
#Making all the priors we want to check (aka just changing the sd)
real_sd_priors <- c(
prior(normal(0, 0.01), class = b, coef= "diagnosisTD:visit"),
prior(normal(0, 0.02), class = b, coef= "diagnosisTD:visit"),
prior(normal(0, 0.03), class = b, coef= "diagnosisTD:visit"),
prior(normal(0, 0.04), class = b, coef= "diagnosisTD:visit"),
prior(normal(0, 0.05), class = b, coef= "diagnosisTD:visit"),
prior(normal(0, 0.06), class = b, coef= "diagnosisTD:visit"),
prior(normal(0, 0.07), class = b, coef= "diagnosisTD:visit"),
prior(normal(0, 0.08), class = b, coef= "diagnosisTD:visit"),
prior(normal(0, 0.09), class = b, coef= "diagnosisTD:visit"),
prior(normal(0, 0.10), class = b, coef= "diagnosisTD:visit"),
prior(normal(0, 0.11), class = b, coef= "diagnosisTD:visit"),
prior(normal(0, 0.12), class = b, coef= "diagnosisTD:visit"),
prior(normal(0, 0.13), class = b, coef= "diagnosisTD:visit"),
prior(normal(0, 0.14), class = b, coef= "diagnosisTD:visit"),
prior(normal(0, 0.15), class = b, coef= "diagnosisTD:visit")#,
# prior(normal(0, 0.16), class = b, coef= "diagnosisTD:visit"),
# prior(normal(0, 0.17), class = b, coef= "diagnosisTD:visit"),
# prior(normal(0, 0.18), class = b, coef= "diagnosisTD:visit"),
# prior(normal(0, 0.19), class = b, coef= "diagnosisTD:visit"),
# prior(normal(0, 0.20), class = b, coef= "diagnosisTD:visit")
)
#loop through making priors with different sd
for (i in seq(1, 15)) {
TD_priors_real[4,] <- real_sd_priors[i,]
real_model_for_loop <- brm(
mlu3,
data= df1,
family = lognormal,
prior = TD_priors_real,
sample_prior = T,
iter = 2000,
warmup = 1000,
backend = "cmdstanr",
threads = threading(2),
cores = 2,
chains = 2,
control = list(adapt_delta = 0.99, max_treedepth = 20)
)
Model_for_loop_samp_real <- as_draws_df(real_model_for_loop)
#posterior_predictions <- spread_draws(model_for_loop, b_DiagASD:Visit) #slope, so b_DiagASD:Visit
real_posterior_predictions_TD <- Model_for_loop_samp_real[,3] #number 3 =ASD
real_posterior_prediction_TD[i] <- median(real_posterior_predictions_TD$`b_diagnosisTD:visit`)
real_posterior_prediction_TD_lci[i] <- quantile(real_posterior_predictions_TD$`b_diagnosisTD:visit`, prob = 0.025) #lower boundy for 95% interval
real_posterior_prediction_TD_uci[i] <- quantile(real_posterior_predictions_TD$`b_diagnosisTD:visit`, prob = 0.975) #upper boundry for 95% interval
}
#sensitivity check ASD the real one (maybe doesn't make sence with uninformed priors..)
ASD_prior_SD_real <- seq(0.01, 0.15, length.out = 15)
#My priors
ASD_priors_real <- c(
prior(normal(0, 0.2), class=b, lb=0),
prior(normal(0.41, 0.41), class=b, coef= "diagnosisASD"),
prior(normal(0.41, 0.22), class=b, coef= "diagnosisTD"),
prior(normal(0.15, 0.1), class=b, coef= "diagnosisASD:visit"),
prior(normal(0.2, 0.08), class=b, coef= "diagnosisTD:visit"),
prior(normal(0, 0.2), class=sd, coef= Intercept, group=ID), #allowing the intercept for each person to varriate with 40% (because of logscale)
prior(normal(0, 0.1), class=sd, coef= visit, group=ID), #slope to varriate with 20% for each person
prior(normal(0, 0.2), class= sigma),
prior(lkj(1), class= "cor")
)
#create empty sets to store output of the loop for ASD:
real_posterior_prediction_ASD <- c()
real_posterior_prediction_ASD_lci <- c()
real_posterior_prediction_ASD_uci <- c()
#Making all the priors we want to check (aka just changing the sd)
real_sd_priors <- c(
prior(normal(0, 0.01), class = b, coef= "diagnosisASD:visit"),
prior(normal(0, 0.02), class = b, coef= "diagnosisASD:visit"),
prior(normal(0, 0.03), class = b, coef= "diagnosisASD:visit"),
prior(normal(0, 0.04), class = b, coef= "diagnosisASD:visit"),
prior(normal(0, 0.05), class = b, coef= "diagnosisASD:visit"),
prior(normal(0, 0.06), class = b, coef= "diagnosisASD:visit"),
prior(normal(0, 0.07), class = b, coef= "diagnosisASD:visit"),
prior(normal(0, 0.08), class = b, coef= "diagnosisASD:visit"),
prior(normal(0, 0.09), class = b, coef= "diagnosisASD:visit"),
prior(normal(0, 0.10), class = b, coef= "diagnosisASD:visit"),
prior(normal(0, 0.11), class = b, coef= "diagnosisASD:visit"),
prior(normal(0, 0.12), class = b, coef= "diagnosisASD:visit"),
prior(normal(0, 0.13), class = b, coef= "diagnosisASD:visit"),
prior(normal(0, 0.14), class = b, coef= "diagnosisASD:visit"),
prior(normal(0, 0.15), class = b, coef= "diagnosisASD:visit")#,
# prior(normal(0, 0.16), class = b, coef= "diagnosisTD:visit"),
# prior(normal(0, 0.17), class = b, coef= "diagnosisTD:visit"),
# prior(normal(0, 0.18), class = b, coef= "diagnosisTD:visit"),
# prior(normal(0, 0.19), class = b, coef= "diagnosisTD:visit"),
# prior(normal(0, 0.20), class = b, coef= "diagnosisTD:visit")
)
#loop through making priors with different sd
for (i in seq(1, 15)) {
ASD_priors_real[4,] <- real_sd_priors[i,]
real_model_for_loop <- brm(
mlu3,
data= df1,
family = lognormal,
prior = ASD_priors_real,
sample_prior = T,
iter = 2000,
warmup = 1000,
backend = "cmdstanr",
threads = threading(2),
cores = 2,
chains = 2,
control = list(adapt_delta = 0.99, max_treedepth = 20)
)
Model_for_loop_samp_real <- as_draws_df(real_model_for_loop)
#posterior_predictions <- spread_draws(model_for_loop, b_DiagASD:Visit) #slope, so b_DiagASD:Visit
real_posterior_predictions_ASD <- Model_for_loop_samp_real[,3] #number 3 =ASD
real_posterior_prediction_ASD[i] <- median(real_posterior_predictions_ASD$`b_diagnosisASD:visit`)
real_posterior_prediction_ASD_lci[i] <- quantile(real_posterior_predictions_ASD$`b_diagnosisASD:visit`, prob = 0.025) #lower boundy for 95% interval
real_posterior_prediction_ASD_uci[i] <- quantile(real_posterior_predictions_ASD$`b_diagnosisASD:visit`, prob = 0.975) #upper boundry for 95% interval
}
#Making dataframe from values from loop
real_sensitivity_check_ASD <- data.frame(ASD_prior_SD_real, real_posterior_prediction_ASD, real_posterior_prediction_ASD_lci, real_posterior_prediction_ASD_uci)
#sensitivity check ASD the real one (maybe doesn't make sence with uninformed priors..)
ASD_prior_SD_real <- seq(0.01, 0.15, length.out = 15)
#My priors
ASD_priors_real <- c(
prior(normal(0, 0.2), class=b, lb=0),
prior(normal(0.41, 0.41), class=b, coef= "diagnosisASD"),
prior(normal(0.41, 0.22), class=b, coef= "diagnosisTD"),
prior(normal(0.15, 0.1), class=b, coef= "diagnosisASD:visit"),
prior(normal(0.2, 0.08), class=b, coef= "diagnosisTD:visit"),
prior(normal(0, 0.2), class=sd, coef= Intercept, group=ID), #allowing the intercept for each person to varriate with 40% (because of logscale)
prior(normal(0, 0.1), class=sd, coef= visit, group=ID), #slope to varriate with 20% for each person
prior(normal(0, 0.2), class= sigma),
prior(lkj(1), class= "cor")
)
#create empty sets to store output of the loop for ASD:
real_posterior_prediction_ASD <- c()
real_posterior_prediction_ASD_lci <- c()
real_posterior_prediction_ASD_uci <- c()
#Making all the priors we want to check (aka just changing the sd)
real_sd_priors <- c(
prior(normal(0, 0.01), class = b, coef= "diagnosisASD:visit"),
prior(normal(0, 0.02), class = b, coef= "diagnosisASD:visit"),
prior(normal(0, 0.03), class = b, coef= "diagnosisASD:visit"),
prior(normal(0, 0.04), class = b, coef= "diagnosisASD:visit"),
prior(normal(0, 0.05), class = b, coef= "diagnosisASD:visit"),
prior(normal(0, 0.06), class = b, coef= "diagnosisASD:visit"),
prior(normal(0, 0.07), class = b, coef= "diagnosisASD:visit"),
prior(normal(0, 0.08), class = b, coef= "diagnosisASD:visit"),
prior(normal(0, 0.09), class = b, coef= "diagnosisASD:visit"),
prior(normal(0, 0.10), class = b, coef= "diagnosisASD:visit"),
prior(normal(0, 0.11), class = b, coef= "diagnosisASD:visit"),
prior(normal(0, 0.12), class = b, coef= "diagnosisASD:visit"),
prior(normal(0, 0.13), class = b, coef= "diagnosisASD:visit"),
prior(normal(0, 0.14), class = b, coef= "diagnosisASD:visit"),
prior(normal(0, 0.15), class = b, coef= "diagnosisASD:visit")#,
# prior(normal(0, 0.16), class = b, coef= "diagnosisTD:visit"),
# prior(normal(0, 0.17), class = b, coef= "diagnosisTD:visit"),
# prior(normal(0, 0.18), class = b, coef= "diagnosisTD:visit"),
# prior(normal(0, 0.19), class = b, coef= "diagnosisTD:visit"),
# prior(normal(0, 0.20), class = b, coef= "diagnosisTD:visit")
)
#loop through making priors with different sd
for (i in seq(1, 15)) {
ASD_priors_real[4,] <- real_sd_priors[i,]
real_model_for_loop <- brm(
mlu3,
data= df1,
family = lognormal,
prior = ASD_priors_real,
sample_prior = T,
iter = 2000,
warmup = 1000,
backend = "cmdstanr",
threads = threading(2),
cores = 2,
chains = 2,
control = list(adapt_delta = 0.99, max_treedepth = 20)
)
Model_for_loop_samp_real <- as_draws_df(real_model_for_loop)
#posterior_predictions <- spread_draws(model_for_loop, b_DiagASD:Visit) #slope, so b_DiagASD:Visit
real_posterior_predictions_ASD <- Model_for_loop_samp_real[,3] #number 3 =ASD
real_posterior_prediction_ASD[i] <- median(real_posterior_predictions_ASD$`b_diagnosisASD:visit`)
real_posterior_prediction_ASD_lci[i] <- quantile(real_posterior_predictions_ASD$`b_diagnosisASD:visit`, prob = 0.025) #lower boundy for 95% interval
real_posterior_prediction_ASD_uci[i] <- quantile(real_posterior_predictions_ASD$`b_diagnosisASD:visit`, prob = 0.975) #upper boundry for 95% interval
}
#Making dataframe from values from loop
real_sensitivity_check_ASD <- data.frame(ASD_prior_SD_real, real_posterior_prediction_ASD, real_posterior_prediction_ASD_lci, real_posterior_prediction_ASD_uci)
#visualizing the sensitivity plot
real_rubostness_check_ASD <- ggplot(data=real_sensitivity_check_ASD, aes(x=ASD_prior_SD_real, y=real_posterior_prediction_ASD)) +
geom_point(size = 3) +
geom_pointrange(ymin = real_posterior_prediction_ASD_lci, ymax = real_posterior_prediction_ASD_uci) + #pointrange is 95% interval (vertical lines for each dot)
ylim(0.001, 0.20) + #range for the slope (y-aksis range)
labs(x="Standard Deviation of Slope Prior",
y="Posterior Estimate for Slope",
title="Sensitivity analysis for multi-level model ASD") +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5, size = 15),
axis.title.x = element_text(size = 13),
axis.text.y = element_text(size = 12),
axis.text.x = element_text(size = 12),
axis.title.y = element_text(size = 13))+
geom_abline(intercept=0.17,slope=0, color="#3FFFB6")
real_rubostness_check_ASD <- ggplot(data=real_sensitivity_check_ASD, aes(x=ASD_prior_ASD_real, y=real_posterior_prediction_ASD)) +
geom_point(size = 3) +
geom_pointrange(ymin = real_posterior_prediction_ASD_lci, ymax = real_posterior_prediction_ASD_uci) + #pointrange is 95% interval (vertical lines for each dot)
ylim(0.001, 0.20) + #range for the slope (y-aksis range)
labs(x="Standard Deviation of Slope Prior",
y="Posterior Estimate for Slope",
title="Sensitivity analysis for multi-level model ASD") +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5, size = 15),
axis.title.x = element_text(size = 13),
axis.text.y = element_text(size = 12),
axis.text.x = element_text(size = 12),
axis.title.y = element_text(size = 13))+
geom_abline(intercept=0.04,slope=0, color="#3FFFB6")
ggsave("true_real_rubostness_check_ASD.png", plot=real_rubostness_check_ASD)
real_rubostness_check_ASD <- ggplot(data=real_sensitivity_check_ASD, aes(x=ASD_prior_SD_real, y=real_posterior_prediction_ASD)) +
geom_point(size = 3) +
geom_pointrange(ymin = real_posterior_prediction_ASD_lci, ymax = real_posterior_prediction_ASD_uci) + #pointrange is 95% interval (vertical lines for each dot)
ylim(0.001, 0.20) + #range for the slope (y-aksis range)
labs(x="Standard Deviation of Slope Prior",
y="Posterior Estimate for Slope",
title="Sensitivity analysis for multi-level model ASD") +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5, size = 15),
axis.title.x = element_text(size = 13),
axis.text.y = element_text(size = 12),
axis.text.x = element_text(size = 12),
axis.title.y = element_text(size = 13))+
geom_abline(intercept=0.04,slope=0, color="#3FFFB6")
real_rubostness_check_ASD <- ggplot(data=real_sensitivity_check_ASD, aes(x=ASD_prior_SD_real, y=real_posterior_prediction_ASD)) +
geom_point(size = 3) +
geom_pointrange(ymin = real_posterior_prediction_ASD_lci, ymax = real_posterior_prediction_ASD_uci) + #pointrange is 95% interval (vertical lines for each dot)
ylim(0.001, 0.20) + #range for the slope (y-aksis range)
labs(x="Standard Deviation of Slope Prior",
y="Posterior Estimate for Slope",
title="Sensitivity analysis for multi-level model ASD") +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5, size = 15),
axis.title.x = element_text(size = 13),
axis.text.y = element_text(size = 12),
axis.text.x = element_text(size = 12),
axis.title.y = element_text(size = 13))+
geom_abline(intercept=0.04,slope=0, color="#3FFFB6")
ggsave("true_real_rubostness_check_ASD.png", plot=real_rubostness_check_ASD)
real_rubostness_check_ASD
Robustness <- gridExtra::grid.arrange(true_real_rubostness_check_ASD,true_real_rubostness_check_TD)
Robustness <- gridExtra::grid.arrange(real_rubostness_check_ASD,real_rubostness_check_TD)
ggsave("true_real_rubostness_check_ASD_TD.png", plot=Robustness)
hypothesis(mlu3p3real, "diagnosisASD < diagnosisTD")
hypothesis(mlu3p3real,"diagnosisTD:visit > diagnosisASD:visit",group="ID",scope="coef") #individual levels
hypothesis(mlu3p3real, "visit<0.03", group = "ID", scope="coef")
