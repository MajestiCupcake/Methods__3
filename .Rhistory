)+
ggtitle('Variability per visit')
rp_all <- grid.arrange(rp1,rp2,rp5,rp3,rp4,top='Prior-posterior update check')
rp4 <- ggplot(Rosterior_m3)+
geom_histogram(aes(prior_b_diagnosisASD:visit),
fill='red',
color='red',
alpha=0.3,
bins=50
)+
geom_histogram(aes(b_diagnosisASD:visit),
fill='green',
color='green',
alpha=0.3,
bins=50
)+
geom_histogram(aes(prior_b_diagnosisTD:visit),
fill='orange',
color='orange',
alpha=0.3,
bins=50
)+
geom_histogram(aes(b_diagnosisTD:visit),
fill='yellow',
color='yellow',
alpha=0.3,
bins=50
)+
ggtitle('Diagnosis:Visit')
rp_all <- grid.arrange(rp1,rp2,rp5,rp4,rp3,top='Prior-posterior update check')
rp2 <- ggplot(Rosterior_m3)+
geom_histogram(aes(prior_sd_ID__Intercept),
fill='red',
color='red',
alpha=0.3,
bins=50
)+
geom_histogram(aes(sd_ID_Intercept),
fill='blue',
color='blue',
alpha=0.3,
bins=50
)+
ggtitle('Variability of the intercept')
rp_all <- grid.arrange(rp1,rp2,rp5,rp4,rp3,top='Prior-posterior update check')
variables(Rosterior_m3)
rp2 <- ggplot(Rosterior_m3)+
geom_histogram(aes(prior_sd_ID__Intercept),
fill='red',
color='red',
alpha=0.3,
bins=50
)+
geom_histogram(aes(sd_ID__Intercept),
fill='blue',
color='blue',
alpha=0.3,
bins=50
)+
ggtitle('Variability of the intercept')
rp_all <- grid.arrange(rp1,rp2,rp5,rp4,rp3,top='Prior-posterior update check')
rp1
rp2
rp5
rp4
rp4 <- ggplot(Rosterior_m3)+
geom_histogram(aes(prior_b_diagnosisASD:visit),
fill='red',
color='red',
alpha=0.3,
bins=50
)+
geom_histogram(aes(b_diagnosisASD:visit),
fill='green',
color='green',
alpha=0.3,
bins=50
)+
geom_histogram(aes(prior_b_diagnosisTD:visit),
fill='orange',
color='orange',
alpha=0.3,
bins=50
)+
geom_histogram(aes(b_diagnosisTD:visit),
fill='yellow',
color='yellow',
alpha=0.3,
bins=50
)+
ggtitle('Diagnosis:Visit')
rp_all <- grid.arrange(rp1,rp2,rp5,rp4,rp3)#,top='Prior-posterior update check')
rp4
ggplot(Posterior_m3)+
geom_histogram(aes(prior_b_diagnosisASD:visit),
fill='red',
color='red',
alpha=0.3,
bins=50
)+
geom_histogram(aes(b_diagnosisASD:visit),
fill='green',
color='green',
alpha=0.3,
bins=50
)+
geom_histogram(aes(prior_b_diagnosisTD:visit),
fill='orange',
color='orange',
alpha=0.3,
bins=50
)+
geom_histogram(aes(b_diagnosisTD:visit),
fill='yellow',
color='yellow',
alpha=0.3,
bins=50
)+
ggtitle('Diagnosis:Visit')
ggplot(Posterior_m3)+
geom_histogram(aes(prior_b_diagnosisasd:visit),
fill='red',
color='red',
alpha=0.3,
bins=50
)+
geom_histogram(aes(b_diagnosisasd:visit),
fill='green',
color='green',
alpha=0.3,
bins=50
)+
geom_histogram(aes(prior_b_diagnosistd:visit),
fill='orange',
color='orange',
alpha=0.3,
bins=50
)+
geom_histogram(aes(b_diagnosistd:visit),
fill='yellow',
color='yellow',
alpha=0.3,
bins=50
)+
ggtitle('Diagnosis:Visit')
ggplot(Posterior_m3)+
geom_histogram(aes(prior_b_diagnosisasd:visit),
fill='red',
color='red',
alpha=0.3,
bins=50
)+
geom_histogram(aes(b_diagnosisasd:visit),
fill='green',
color='green',
alpha=0.3,
bins=50
#                )+
# geom_histogram(aes(prior_b_diagnosistd:visit),
#                fill='orange',
#                color='orange',
#                alpha=0.3,
#                bins=50
#                )+
# geom_histogram(aes(b_diagnosistd:visit),
#                fill='yellow',
#                color='yellow',
#                alpha=0.3,
#                bins=50
)+
ggtitle('Diagnosis:Visit')
ggplot(Posterior_m3)+
geom_histogram(aes(prior_b_diagnosisasd:visit),
fill='red',
color='red',
alpha=0.3,
bins=50
)+
geom_histogram(aes(b_diagnosisasd:visit),
fill='green',
color='green',
alpha=0.3,
bins=50
)+
# geom_histogram(aes(prior_b_diagnosistd:visit),
#                fill='orange',
#                color='orange',
#                alpha=0.3,
#                bins=50
#                )+
# geom_histogram(aes(b_diagnosistd:visit),
#                fill='yellow',
#                color='yellow',
#                alpha=0.3,
#                bins=50
# )+
ggtitle('Diagnosis:Visit')
ggplot(Posterior_m3)+
geom_histogram(aes(prior_b_diagnosisasd:visit),
fill='red',
color='red',
alpha=0.3,
bins=50
)+
# geom_histogram(aes(b_diagnosisasd:visit),
#                fill='green',
#                color='green',
#                alpha=0.3,
#                bins=50
#                 )+
# geom_histogram(aes(prior_b_diagnosistd:visit),
#                fill='orange',
#                color='orange',
#                alpha=0.3,
#                bins=50
#                )+
# geom_histogram(aes(b_diagnosistd:visit),
#                fill='yellow',
#                color='yellow',
#                alpha=0.3,
#                bins=50
# )+
ggtitle('Diagnosis:Visit')
ggplot(Posterior_m3)+
# geom_histogram(aes(prior_b_diagnosisasd:visit),
#                fill='red',
#                color='red',
#                alpha=0.3,
#                bins=50
#                )+
geom_histogram(aes(b_diagnosisasd:visit),
fill='green',
color='green',
alpha=0.3,
bins=50
)+
# geom_histogram(aes(prior_b_diagnosistd:visit),
#                fill='orange',
#                color='orange',
#                alpha=0.3,
#                bins=50
#                )+
# geom_histogram(aes(b_diagnosistd:visit),
#                fill='yellow',
#                color='yellow',
#                alpha=0.3,
#                bins=50
# )+
ggtitle('Diagnosis:Visit')
ggplot(Posterior_m3)+
# geom_histogram(aes(prior_b_diagnosisasd:visit),
#                fill='red',
#                color='red',
#                alpha=0.3,
#                bins=50
#                )+
# geom_histogram(aes(b_diagnosisasd:visit),
#                fill='green',
#                color='green',
#                alpha=0.3,
#                bins=50
#                 )+
geom_histogram(aes(prior_b_diagnosistd:visit),
fill='orange',
color='orange',
alpha=0.3,
bins=50
)+
# geom_histogram(aes(b_diagnosistd:visit),
#                fill='yellow',
#                color='yellow',
#                alpha=0.3,
#                bins=50
# )+
ggtitle('Diagnosis:Visit')
rp4 <- ggplot()+
geom_histogram(aes(Rosterior_m3$prior_b_diagnosisASD:visit),
fill='red',
color='red',
alpha=0.3,
bins=50
)+
geom_histogram(aes(Rosterior_m3$b_diagnosisASD:visit),
fill='green',
color='green',
alpha=0.3,
bins=50
)+
geom_histogram(aes(Rosterior_m3$prior_b_diagnosisTD:visit),
fill='orange',
color='orange',
alpha=0.3,
bins=50
)+
geom_histogram(aes(Rosterior_m3$b_diagnosisTD:visit),
fill='yellow',
color='yellow',
alpha=0.3,
bins=50
)+
ggtitle('Diagnosis:Visit')
rp_all <- grid.arrange(rp1,rp2,rp5,rp4,rp3)#,top='Prior-posterior update check')
rp_all <- grid.arrange(rp1,rp2,rp5,rp4,rp3, top='Prior-posterior update check')
rp_all
rp1
rp2
rp5
rp4
rp3
rp4 <- ggplot()+
geom_histogram(aes(Rosterior_m3$'prior_b_diagnosisASD:visit'),
fill='red',
color='red',
alpha=0.3,
bins=50
)+
geom_histogram(aes(Rosterior_m3$'b_diagnosisASD:visit'),
fill='green',
color='green',
alpha=0.3,
bins=50
)+
geom_histogram(aes(Rosterior_m3$'prior_b_diagnosisTD:visit'),
fill='orange',
color='orange',
alpha=0.3,
bins=50
)+
geom_histogram(aes(Rosterior_m3$'b_diagnosisTD:visit'),
fill='yellow',
color='yellow',
alpha=0.3,
bins=50
)+
ggtitle('Diagnosis:Visit')
rp4
rp_all <- grid.arrange(rp1,rp2,rp5,rp4,rp3, top='Prior-posterior update check')
rp_all <- grid.arrange(rp1,rp2,rp5,rp4,rp3, top='Prior-posterior update check')
rp_all
ggsave('pp_update_m3_real.png',rp_all)
summary(mlu3p3real)
plot(conditional_effects(mlu3p3real), points = T)
summary(mlu3p3real)
#overall
hypothesis(mlu3p3real, "MLU < Intercept",class="sd",group="ID")
variables(mlu3p3real)
#overall
hypothesis(mlu3p3real, c("b_diagnosisASD:visit < Intercept",class="sd",group="ID","b_diagnosisTD:visit < Intercept",class="sd",group="ID"))
#overall
hypothesis(mlu3p3real, c("diagnosisASD:visit < diagnosisASD",class="sd",group="ID","diagnosisTD:visit < diagnosisTD",class="sd",group="ID"))
#overall
hypothesis(mlu3p3real, c("diagnosisASD:visit < diagnosisASD",class="sd",group="ID","diagnosisTD:visit < diagnosisTD",class="sd",group="ID"))
hypothesis(mlu3p3real, "diagnosisASD:visit < diagnosisASD",class="sd",group="ID")
#overall
hypothesis(mlu3p3real, "diagnosisASD:visit < Intercept",class="sd",group="ID")
#overall
hypothesis(mlu3p3real, "diagnosisASD:visit < Intercept",group="ID")
#overall
hypothesis(mlu3p3real, "diagnosisASD:visit < Intercept")
#overall
hypothesis(mlu3p3real, "diagnosisASD:visit < sd_ID__Intercept")
#overall
hypothesis(mlu3p3real, "diagnosisASD:visit < diagnosisTD:visit",class="sd",group="ID")
#overall
hypothesis(mlu3p3real, "diagnosisASD:visit < diagnosisTD:visit")
hypothesis(mlu3p3real,"diagnosisASD:visit < diagnosisTD:visit",group="ID",scope="coef")
#overall
hypothesis(mlu3p3real, "diagnosisASD:visit > diagnosisTD:visit") #population level
hypothesis(mlu3p3real,"diagnosisASD:visit = diagnosisTD:visit",group="ID",scope="coef")
hypothesis(mlu3p3real,"diagnosisASD:visit < diagnosisTD:visit",group="ID",scope="coef")
# construct a sequence of sds to loop through for the slope prior:
priSD <- seq(0.1, 1.5, length.out = 15)
priorsN <- p3
#create empty variables to store output of the loop:
post_pred <- c()
post_pred_lci <- c()
post_pred_uci <- c()
for (i in 1:length(priSD)) {
priorsN[2,] <- set_prior(paste0("normal(0, ", priSD[i],")"), class = "b")
model_for_loop <- brm(mlu3,
data   = df,
family = lognormal,
prior  = priorsN,
sample_prior = T,
warmup = 1000,
iter   = 5000,
cores  = 2,
chains = 2,
backend = "cmdstanr",
threads = threading(2),
save_pars = save_pars(all = TRUE),
control = list(adapt_delta   = 0.99,
max_treedepth = 15))
post_preds <- spread_draws(model_for_loop, b_diagnosisASD:visit)
post_pred[i] <- median(post_preds$b_diagnosisASD:visit)
post_pred_lci[i] <- quantile(post_preds$b_diagnosisASD:visit, prob = 0.025)
post_pred_uci[i] <- quantile(post_predsb_diagnosisASD:visit, prob = 0.975)
}
# construct a sequence of sds to loop through for the slope prior:
priSD <- seq(0.1, 1.5, length.out = 15)
priorsN <- p3
#create empty variables to store output of the loop:
post_pred <- c()
post_pred_lci <- c()
post_pred_uci <- c()
for (i in 1:length(priSD)) {
priorsN[2,] <- set_prior(paste0("normal(0, ", priSD[i],")"), class = "b")
model_for_loop <- brm(mlu3,
data   = df2,
family = lognormal,
prior  = priorsN,
sample_prior = T,
warmup = 1000,
iter   = 5000,
cores  = 2,
chains = 2,
backend = "cmdstanr",
threads = threading(2),
save_pars = save_pars(all = TRUE),
control = list(adapt_delta   = 0.99,
max_treedepth = 15))
post_preds <- spread_draws(model_for_loop, b_diagnosisASD:visit)
post_pred[i] <- median(post_preds$b_diagnosisASD:visit)
post_pred_lci[i] <- quantile(post_preds$b_diagnosisASD:visit, prob = 0.025)
post_pred_uci[i] <- quantile(post_predsb_diagnosisASD:visit, prob = 0.975)
}
# construct a sequence of sds to loop through for the slope prior:
priSD <- seq(0.1, 1.5, length.out = 15)
priorsN <- p3
#create empty variables to store output of the loop:
post_pred <- c()
post_pred_lci <- c()
post_pred_uci <- c()
for (i in 1:length(priSD)) {
# priorsN[2,] <- set_prior(paste0("normal(0, ", priSD[i],")"), class = "b")
model_for_loop <- brm(mlu3,
data   = df2,
family = lognormal,
prior  = priorsN,
sample_prior = T,
warmup = 1000,
iter   = 5000,
cores  = 2,
chains = 2,
backend = "cmdstanr",
threads = threading(2),
save_pars = save_pars(all = TRUE),
control = list(adapt_delta   = 0.99,
max_treedepth = 15))
post_preds <- spread_draws(model_for_loop, b_diagnosisASD:visit)
post_pred[i] <- median(post_preds$b_diagnosisASD:visit)
post_pred_lci[i] <- quantile(post_preds$b_diagnosisASD:visit, prob = 0.025)
post_pred_uci[i] <- quantile(post_predsb_diagnosisASD:visit, prob = 0.975)
}
??spread_draws
# construct a sequence of sds to loop through for the slope prior:
priSD <- seq(0.1, 1.5, length.out = 15)
priorsN <- p3
#create empty variables to store output of the loop:
post_pred <- c()
post_pred_lci <- c()
post_pred_uci <- c()
for (i in 1:length(priSD)) {
# priorsN[2,] <- set_prior(paste0("normal(0, ", priSD[i],")"), class = "b")
model_for_loop <- brm(mlu3,
data   = df2,
family = lognormal,
prior  = priorsN,
sample_prior = T,
warmup = 1000,
iter   = 5000,
cores  = 2,
chains = 2,
backend = "cmdstanr",
threads = threading(2),
save_pars = save_pars(all = TRUE),
control = list(adapt_delta   = 0.99,
max_treedepth = 15))
post_preds <- tidybayes::spread_draws(model_for_loop, b_diagnosisASD:visit)
post_pred[i] <- median(post_preds$b_diagnosisASD:visit)
post_pred_lci[i] <- quantile(post_preds$b_diagnosisASD:visit, prob = 0.025)
post_pred_uci[i] <- quantile(post_predsb_diagnosisASD:visit, prob = 0.975)
}
#overall
hypothesis(mlu3p3real, "diagnosisTD:visit > diagnosisASD:visit") #population level
#overall
hypothesis(mlu3p3real, "diagnosisTD:visit > diagnosisASD:visit") #population level
hypothesis(mlu3p3real,"diagnosisTD:visit < diagnosisASD:visit",group="ID",scope="coef") #individual levels
hypothesis(mlu3p3real,"diagnosisTD:visit < diagnosisASD:visit",group="ID") #individual levels
hypothesis(mlu3p3real,"diagnosisTD:visit < diagnosisASD:visit",group="ID",scope="coef") #individual levels
plot_df <- tibble(
Subject = rownames(coef(mlu3p3real)[["ID"]][,,"Intercept"]),
ASD = coef(mlu3p3real)[["ID"]][,,"diagnosisASD"][,1],
TD = ASD + coef(mlu3p3real)[["ID"]][,,"diagnosisTD"][,1],
Type = "partial pooling"
) %>% pivot_longer(ASD:TD) %>% dplyr::rename(
Register = name,
ArticulationS = value
)
df <- d[, c("Subject", "Register", "ArticulationS")] %>%
mutate(Type = "no pooling")
plot_df <- tibble(
Subject = rownames(coef(mlu3p3real)[["ID"]][,,"Intercept"]),
ASD = coef(mlu3p3real)[["ID"]][,,"diagnosisASD"][,1],
TD = ASD + coef(mlu3p3real)[["ID"]][,,"diagnosisTD"][,1],
Type = "partial pooling"
) %>% pivot_longer(ASD:TD) %>% dplyr::rename(
Register = name,
ArticulationS = value
)
df <- df2[, c("Subject", "Register", "ArticulationS")] %>%
mutate(Type = "no pooling")
